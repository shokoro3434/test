readme
package jp.ac.nct.math;

public interface SingleRegressionAnalysis {
	public abstract double getA ();
	public abstract double getB ();
}
package jp.ac.nct.math;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;


import org.apache.commons.csv.CSVRecord;
import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.math3.stat.StatUtils;

/**
 * 
 * @author 000001A007FQ2
 *
 */
public final class RaceUtils {
	
	private static double[] toAvailablePrimitiveArray (double [] src,int available){
		List<Double> doubleList = new ArrayList<Double>();
		for (int i = src.length - available ; i < src.length ; i ++){
			doubleList.add(new Double(src[i]));
		}
		Double[] doubleArray = (Double[]) doubleList.toArray(new Double[0]);
		return ArrayUtils.toPrimitive(doubleArray);
	}
	
	private static double toMean(CSVRecord record){
		List<Double> raceList = new ArrayList<Double>();
		final int RACE_INDEX = 1;
		for (int i = RACE_INDEX; i < record.size() ; i++) {
			if (record.get(i).isEmpty()){
				continue;
			}
			final String ILLEGAL_STRING = "着";
			if (record.get(i).indexOf(ILLEGAL_STRING) != -1){
				continue;
			}
			raceList.add(new Double(record.get(i)));
		}
		if (raceList.isEmpty()){
			return 0;
		}
		Double[] doubleArray = (Double[]) raceList.toArray(new Double[0]);
		double[] primitiveDoubleArray = ArrayUtils.toPrimitive(doubleArray);
		return StatUtils.mean(primitiveDoubleArray);
	}
	
	public static HorseProperties createHorseProperties(CSVRecord record,int availableRaceCount) {
		List<Double> ret = new ArrayList<Double>();
		final int NUM_INDEX = 0;
		String numberAsString = record.get(NUM_INDEX);
		final int RACE_INDEX = 1;
		for (int i = RACE_INDEX; i < record.size() ; i++) {
			if (record.get(i).isEmpty()){
				continue;
			}
			final String ILLEGAL_STRING = "着";
			if (record.get(i).indexOf(ILLEGAL_STRING) != -1){
				ret.add(new Double(toMean(record)));
			}
			else{
				ret.add(new Double(record.get(i)));
			}
		}
		System.err.println(ret);
		Collections.reverse(ret);
		Double[] doubleArray = (Double[]) ret.toArray(new Double[0]);
		double[] primitiveDoubleArray = ArrayUtils.toPrimitive(doubleArray);
		double[] target = toAvailablePrimitiveArray(primitiveDoubleArray,availableRaceCount);

		System.err.println("variance:"
				+ StatUtils.variance(target));
		System.err.println("sigma:"
				+ Math.sqrt(StatUtils.variance(target)));
		SingleRegressionAnalysis sra = MathUtils
				.createSingleRegressionAnalysis(target,
						target.length);
		return createHorseProperties(
				MathUtils.computeSingleRegressionAnalysisY(sra,
						target.length + 1), target,
						numberAsString);
	}

	private static HorseProperties createHorseProperties(final double y,
			final double[] timeIndexArray, final String numberAsString) {
		return new HorseProperties() {

			public double getY() {
				return y;
			}

			public double[] getTimeIndexArray() {
				return timeIndexArray;
			}

			public String getNumberAsString() {
				return numberAsString;
			}

			public int getAvailableRaceCount() {
				return timeIndexArray.length;
			}
		};
	}
}
package jp.ac.nct.math;

public final class MathUtils {
	private static SingleRegressionAnalysis createSingleRegressionAnalysis(
			final double a, final double b) {
		return new SingleRegressionAnalysis() {

			public double getA() {
				// TODO Auto-generated method stub
				return a;
			}

			public double getB() {
				// TODO Auto-generated method stub
				return b;
			}

		};
	}

	public static SingleRegressionAnalysis createSingleRegressionAnalysis(
			double[] y, int n) {
		double a = 0.0;
		double b = 0.0;
		double c = 0.0;
		double d = 0.0;
		double aa = 0.0;
		double bb = 0.0;

		for (int i = 0; i < n; i++) {
//			System.err.println(y[i]);
			a += ((i) * y[i]);
			b += (i);
			c += y[i];
			d += ((i) * (i));
		}
		aa = (a - (b * c) / n) / (d - (b * b) / n);
		bb = (c - aa * b) / n;
//		System.err.println("a: " + aa);
//		System.err.println("b: " + bb);
		System.err.println("y=" + aa + "x+" + bb);
		return createSingleRegressionAnalysis(aa, bb);
	}

	public static double computeSingleRegressionAnalysisY(
			SingleRegressionAnalysis sra, double x) {
		return sra.getA() * x + sra.getB();
	}

}
package jp.ac.nct.math;

import junit.framework.TestCase;

public class HorseRaceAnalyzerTest extends TestCase {
	public void testA () throws Exception{
		try{
			HorseRaceAnalyzer.main(new String[]{"6"});
		}
		catch(Exception e){
			fail();
			throw e;
		}
	}
}
package jp.ac.nct.math;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.nio.charset.Charset;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.math3.stat.StatUtils;

import com.opencsv.CSVWriter;

public class HorseRaceAnalyzer {

	public static void main(String[] args) throws Exception {
		new HorseRaceAnalyzer().perform(args);
	}

	private void perform(String[] args) throws Exception {
		File csvData = new File("./bin/n-3_8r.csv");
		CSVParser parser = CSVParser.parse(csvData, Charset.defaultCharset(),
				CSVFormat.RFC4180);
		CSVWriter writer = new CSVWriter(new PrintWriter(
				new OutputStreamWriter(
						new FileOutputStream("./bin/n-3_8r.out"), "UTF-8")),
				',', '"', "\r\n");
		writer.writeNext(new String[] { "num", "y", "populationVariance_y",
				"standard_deviation", "mean_y", "max_y", "min_y","y_plus_standard_deviation","y_minus_standard_deviation" });
		for (CSVRecord record : parser) {
			if (record.getRecordNumber() == 1) {
				// CSV Header
				continue;
			}
			HorseProperties hp = RaceUtils.createHorseProperties(record,
					Integer.valueOf(args[0]));
			System.out.println("num: " + hp.getNumberAsString()
					+ ",available race count: " + hp.getAvailableRaceCount()
					+ ",y: " + hp.getY());
			System.out.println("num:" + hp.getNumberAsString() + " の母分散: "
					+ StatUtils.populationVariance(hp.getTimeIndexArray()));
			System.out.println("num:"
					+ hp.getNumberAsString()
					+ " の標準偏差: "
					+ Math.sqrt(StatUtils.populationVariance(hp
							.getTimeIndexArray())));
			System.out.println("num:" + hp.getNumberAsString() + " の平均: "
					+ StatUtils.mean(hp.getTimeIndexArray()));
			System.out.println("num:" + hp.getNumberAsString() + " の最大: "
					+ StatUtils.max(hp.getTimeIndexArray()));
			System.out.println("num:" + hp.getNumberAsString() + " の最小: "
					+ StatUtils.min(hp.getTimeIndexArray()));

			
			double standard_deviation = Math.sqrt(StatUtils.populationVariance(hp
					.getTimeIndexArray()));
			
			writer.writeNext(new String[] {
					hp.getNumberAsString(),
					String.valueOf(hp.getY()),
					String.valueOf(StatUtils.populationVariance(hp
							.getTimeIndexArray())),
							String.valueOf(standard_deviation),
					String.valueOf(StatUtils.mean(hp.getTimeIndexArray())),
					String.valueOf(StatUtils.max(hp.getTimeIndexArray())),
					String.valueOf(StatUtils.min(hp.getTimeIndexArray())),
					String.valueOf(hp.getY() + standard_deviation),
					String.valueOf(hp.getY() - standard_deviation),
					});

		}
		writer.close();
		parser.close();
	}
}
package jp.ac.nct.math;

public interface HorseProperties {
	public abstract String getNumberAsString();
	public abstract double [] getTimeIndexArray();
	public abstract double getY();
	public abstract int getAvailableRaceCount();
}
